{"version":3,"file":"TaskDetail.js","sources":["pages/task/TaskDetail/TaskDetail.vue","../../../Software/hbuilder/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvdGFzay9UYXNrRGV0YWlsL1Rhc2tEZXRhaWwudnVl"],"sourcesContent":["<template>\n  <view class=\"container\">\n    <!-- 自定义导航栏 -->\n    <view class=\"custom-navbar\">\n      <view class=\"navbar-back\" @tap=\"goBack\">\n        <uni-icons type=\"left\" size=\"24\" color=\"#000000\"></uni-icons>\n      </view>\n      <view class=\"navbar-title\">任务详情</view>\n    </view>\n    \n    <!-- 任务状态标签 -->\n    <view class=\"task-status-tag\" :class=\"task.status\">\n      {{ getTaskStatusText(task.status) }}\n    </view>\n\n    <!-- 图片轮播区域 -->\n    <view class=\"image-slider\" v-if=\"task.images && task.images.length > 0 && ['buy', 'sell', 'takeout'].includes(task.type)\">\n      <swiper :indicator-dots=\"true\" :autoplay=\"false\" :interval=\"3000\" :duration=\"500\">\n        <swiper-item v-for=\"(image, index) in task.images\" :key=\"index\">\n          <image :src=\"image\" mode=\"aspectFill\" class=\"slider-image\" @error=\"handleImageError\" />\n        </swiper-item>\n      </swiper>\n    </view>\n\n    <!-- 任务信息区域 -->\n    <view class=\"task-info\">\n      <!-- 标题和类型容器 -->\n      <view class=\"task-header-flex\">\n        <view class=\"task-title\">\n          <template v-if=\"task.type === 'buy'\">求购 - {{ task.title }}</template>\n          <template v-else-if=\"task.type === 'sell'\">出 {{ task.title }} - {{ getConditionText(task.selectedCondition) }}</template>\n          <template v-else-if=\"['express', 'takeout'].includes(task.type)\">{{ task.title }} - {{ task.pickupAddress }}</template>\n          <template v-else>{{ task.title }}</template>\n        </view>\n        <view class=\"task-type\">\n          <text class=\"type-tag\" :class=\"task.type\">{{ getTaskTypeText(task.type) }}</text>\n          <text v-if=\"task.tags && task.tags.includes('加急')\" class=\"urgent-tag\">加急</text>\n        </view>\n      </view>\n      <view class=\"task-time\">\n        <text class=\"time-label\">发布时间：</text>\n        <text class=\"time-value\">{{ task.publishTime }}</text>\n      </view>\n      <!-- 期望送达时间 - 仅在快递或外卖显示 -->\n      <view class=\"task-time\" v-if=\"['express', 'takeout'].includes(task.type)\">\n        <text class=\"time-label\">期望送达时间：</text>\n        <text class=\"time-value\">{{ task.expectedDeliveryTime }}</text>\n      </view>\n      <view class=\"task-reward\">\n        <text class=\"reward-label\">赏金：</text>\n        <text class=\"reward-value\">¥{{ task.reward }}</text>\n      </view>\n       <!-- 商品成色 - 在出物和求购任务显示 -->\n      <view class=\"task-time\" v-if=\"['sell', 'buy'].includes(task.type)\">\n        <text class=\"time-label\">商品成色：</text>\n        <text class=\"time-value\">{{ getConditionText(task.selectedCondition) }}</text>\n      </view>\n    </view>\n\n    <!-- 任务描述区域 -->\n    <view class=\"description-section\">\n      <view class=\"section-title\">具体说明</view>\n      <view class=\"description-text\">{{ task.description }}</view>\n    </view>\n\n    <!-- 具体信息区域 - 快递和外卖显示地址信息，出物不显示 -->\n    <view class=\"address-section\" v-if=\"['express', 'takeout'].includes(task.type)\">\n      <view class=\"section-title\">地址信息</view>\n      <view class=\"address-item\">\n        <view class=\"address-label\">取件地址：</view>\n        <view class=\"address-content\">\n          <text class=\"address-text\">{{ task.pickupAddress }}</text>\n        </view>\n      </view>\n      <!-- 快递单号，仅在快递代取任务显示 -->\n      <view class=\"address-item\" v-if=\"task.type === 'express'\">\n        <view class=\"address-label\">快递单号：</view>\n        <view class=\"address-content\">\n          <text class=\"address-text\">{{ task.trackingNumber }}</text>\n        </view>\n      </view>\n      <view class=\"address-item\">\n        <view class=\"address-label\">送达地址：</view>\n        <view class=\"address-content\">\n          <text class=\"address-text\">{{ task.deliveryAddress }}</text>\n        </view>\n      </view>\n    </view>\n\n    <!-- 联系人信息区域 -->\n    <view class=\"publisher-section\">\n      <view class=\"section-title\">{{ task.type === 'express' ? '收件人信息' : '联系信息' }}</view>\n      <view class=\"publisher-info\">\n        <!-- 仅在快递代取或出物或求购或外卖代拿任务显示联系人姓名和电话 -->\n        <view class=\"publisher-details\" v-if=\"['express', 'sell', 'buy', 'takeout'].includes(task.type)\">\n          <!-- 发布者可以看到完整信息 -->\n          <template v-if=\"isPublisher\">\n            <text class=\"contact-info\">{{ ['express', 'takeout'].includes(task.type) ? '收件人姓名' : '联系人姓名' }}：{{ task.contactName }}</text>\n            <text class=\"contact-info\">联系电话：{{ task.contactPhone }}</text>\n          </template>\n          <!-- 接单者可以看到完整信息 -->\n          <template v-else-if=\"isClaimer\">\n            <text class=\"contact-info\">{{ ['express', 'takeout'].includes(task.type) ? '收件人姓名' : '联系人姓名' }}：{{ task.contactName }}</text>\n            <text class=\"contact-info\">联系电话：{{ task.contactPhone }}</text>\n          </template>\n          <!-- 普通用户只能看到部分信息 -->\n          <template v-else>\n            <text class=\"contact-info\">{{ ['express', 'takeout'].includes(task.type) ? '收件人姓名' : '联系人姓名' }}：{{ task.contactName }}</text>\n            <text class=\"contact-info\">联系电话：接单后可见</text>\n            <text class=\"privacy-tip\">* 为保护发布者隐私，接单后可见完整联系方式</text>\n          </template>\n        </view>\n        <!-- 其他任务类型显示发布者信息 -->\n        <view class=\"publisher-details\" v-else>\n          <image :src=\"task.publisher.avatar\" class=\"publisher-avatar\" />\n          <text class=\"publisher-name\">{{ task.publisher.nickname }}</text>\n          <text class=\"publisher-rating\">信用等级：{{ task.publisher.creditRating }}</text>\n        </view>\n      </view>\n    </view>\n\n    <!-- 底部操作栏 -->\n    <view class=\"bottom-bar\">\n      <view class=\"action-buttons\">\n        <!-- 接单按钮：仅任务状态为pending且不是发布者和接单者时显示 -->\n        <button \n          v-if=\"showClaimButton\" \n          class=\"action-button confirm\" \n          @tap=\"confirmClaimTask\"\n        >\n          确认接单\n        </button>\n        <button \n          v-if=\"showClaimButton\" \n          class=\"action-button ignore\" \n          @tap=\"goBack\"\n        >\n          暂不考虑\n        </button>\n\n        <!-- 发布者视角：沿用原有逻辑 -->\n        <button \n          v-if=\"isPublisher && showStartButton\" \n          class=\"action-button start\" \n          @tap=\"startTask\"\n        >\n          发布任务\n        </button>\n        <button \n          v-if=\"isPublisher && showCancelButton\" \n          class=\"action-button cancel\" \n          @tap=\"cancelTask\"\n        >\n          取消任务\n        </button>\n      </view>\n    </view>\n\n    <!-- 测试模式按钮组 -->\n    <view class=\"test-buttons\" v-if=\"showTestButtons\">\n      <button class=\"test-button\" @tap=\"switchTestRole('publisher')\">切换为发布者</button>\n      <button class=\"test-button\" @tap=\"switchTestRole('claimer')\">切换为接单者</button>\n      <button class=\"test-button\" @tap=\"switchTestRole('user')\">切换为普通用户</button>\n    </view>\n  </view>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      currentUserRole: 'user',\n      TEST_MODE: true,\n      TEST_USER: {\n        publisher: {\n          id: 'test_publisher_id',\n          nickname: '测试发布者',\n          avatar: '/static/avatar/default.png'\n        },\n        claimer: {\n          id: 'test_claimer_id',\n          nickname: '测试接单者',\n          avatar: '/static/avatar/default.png'\n        },\n        user: {\n          id: 'test_user_id',\n          nickname: '测试用户',\n          avatar: '/static/avatar/default.png'\n        }\n      },\n      task: {\n        id: '',\n        type: '',\n        status: '',\n        title: '',\n        description: '',\n        reward: 0,\n        publishTime: '',\n        expectedDeliveryTime: '',\n        pickupAddress: '',\n        deliveryAddress: '',\n        trackingNumber: '',\n        recipientName: '',\n        contactName: '',\n        contactPhone: '',\n        selectedCondition: '',\n        images: [],\n        publisher: {\n          id: '',\n          nickname: '',\n          avatar: '',\n          creditRating: 0\n        },\n        accepter: null\n      }\n    }\n  },\n  computed: {\n    isPublisher() {\n      return this.currentUserRole === 'publisher';\n    },\n    isClaimer() {\n      return this.currentUserRole === 'claimer';\n    },\n    canClaimTask() {\n      return !this.isPublisher && !this.isClaimer && this.task.status === 'pending';\n    },\n    showClaimButton() {\n      return this.canClaimTask;\n    },\n    showStartButton() {\n      return this.isPublisher && this.task.status === 'pending';\n    },\n    showSubmitButton() {\n      return this.isPublisher && this.task.status === 'in_progress';\n    },\n    showCancelButton() {\n      return this.isPublisher && ['pending', 'in_progress'].includes(this.task.status);\n    },\n    showTestButtons() {\n      return this.TEST_MODE;\n    }\n  },\n  methods: {\n    getCurrentUser() {\n      if (this.TEST_MODE) {\n        const testRole = uni.getStorageSync('testRole') || 'user';\n        const user = this.TEST_USER[testRole] || this.TEST_USER.user;\n        uni.setStorageSync('userToken', 'test_token');\n        uni.setStorageSync('userId', user.id);\n        uni.setStorageSync('userNickname', user.nickname);\n        uni.setStorageSync('userAvatar', user.avatar);\n        return user;\n      } else {\n        return {\n          id: uni.getStorageSync('userId'),\n          nickname: uni.getStorageSync('userNickname'),\n          avatar: uni.getStorageSync('userAvatar')\n        };\n      }\n    },\n    getRole(task, user) {\n      if (!task || !user.id) return 'user';\n      if (task.publisher?.id === user.id) return 'publisher';\n      if (task.accepter?.id === user.id) return 'claimer';\n      return 'user';\n    },\n    determineUserRole() {\n      const user = this.getCurrentUser();\n      const role = this.getRole(this.task, user);\n      console.log('[角色判断] 当前用户:', user.nickname, '任务状态:', this.task.status, '角色:', role);\n      this.currentUserRole = role;\n    },\n    getTaskTypeText(type) {\n      const typeMap = {\n        'express': '快递代取',\n        'takeout': '外卖代拿',\n        'buy': '求购',\n        'sell': '出物'\n      };\n      return typeMap[type] || type;\n    },\n    getConditionText(condition) {\n      const conditionMap = {\n        'new': '全新',\n        'like-new': '九成新',\n        'good': '八成新',\n        'fair': '七成新'\n      };\n      return conditionMap[condition] || condition;\n    },\n    getTaskStatusText(status) {\n      const statusMap = {\n        'pending': '待接单',\n        'in_progress': '进行中',\n        'completed': '已完成',\n        'cancelled': '已取消'\n      };\n      return statusMap[status] || status;\n    },\n    switchTestRole(role) {\n      console.log('[切换角色] 目标角色:', role);\n      uni.setStorageSync('testRole', role);\n      const user = this.TEST_USER[role] || this.TEST_USER.user;\n      uni.setStorageSync('userId', user.id);\n      uni.setStorageSync('userNickname', user.nickname);\n      uni.setStorageSync('userAvatar', user.avatar);\n      this.determineUserRole();\n      uni.showToast({ title: `已切换至${role}角色`, icon: 'none' });\n    },\n    navigateToPickup() {\n      console.log('导航到取件地址');\n    },\n    navigateToDelivery() {\n      console.log('导航到送达地址');\n    },\n    copyPickupAddress() {\n      uni.setClipboardData({\n        data: this.task.pickupAddress,\n        success: () => {\n          uni.showToast({\n            title: '取件地址已复制',\n            icon: 'success'\n          });\n        }\n      });\n    },\n    copyDeliveryAddress() {\n      uni.setClipboardData({\n        data: this.task.deliveryAddress,\n        success: () => {\n          uni.showToast({\n            title: '送达地址已复制',\n            icon: 'success'\n          });\n        }\n      });\n    },\n    handleImageError(e) {\n      console.error('图片加载失败:', e);\n      uni.showToast({\n        title: '图片加载失败',\n        icon: 'none'\n      });\n    },\n    startTask() {\n      if (this.task) {\n        const taskId = Date.now().toString();\n        const currentUser = this.getCurrentUser();\n        \n        const taskData = {\n          ...this.task,\n          id: taskId,\n          status: 'pending',\n          publishTime: new Date().toLocaleString(),\n          publisher: {\n            id: currentUser.id,\n            nickname: currentUser.nickname,\n            avatar: currentUser.avatar,\n            level: 1,\n            credit: 100\n          },\n          ownerType: 'published'\n        };\n\n        console.log('发布任务:', taskData);\n        uni.$emit('newTaskPublished', taskData);\n        uni.showToast({\n          title: '发布成功',\n          icon: 'success',\n          duration: 2000\n        });\n\n        setTimeout(() => {\n          uni.redirectTo({\n            url: '/pages/TaskHall/TaskHall',\n            success: () => {\n              console.log('跳转到任务大厅成功');\n              try {\n                const existingTasks = uni.getStorageSync('myTasks') || '[]';\n                const tasks = JSON.parse(existingTasks);\n                tasks.unshift(taskData);\n                uni.setStorageSync('myTasks', JSON.stringify(tasks));\n                console.log('任务已保存到本地存储');\n              } catch (error) {\n                console.error('保存任务到本地存储失败:', error);\n              }\n            },\n            fail: (err) => {\n              console.error('跳转失败:', err);\n              uni.showToast({\n                title: '页面跳转失败',\n                icon: 'none'\n              });\n            }\n          });\n        }, 1500);\n      } else {\n        console.warn('任务数据为空');\n        uni.showToast({\n          title: '任务数据获取失败',\n          icon: 'none'\n        });\n      }\n    },\n    submitTask() {\n      console.log('提交任务');\n    },\n    cancelTask() {\n      let releasePagePath = '';\n      switch (this.task.type) {\n        case 'express':\n          releasePagePath = '/pages/TaskRelease/DeliveryTask/DeliveryTask';\n          break;\n        case 'takeout':\n          releasePagePath = '/pages/TaskRelease/TakeoutTask/TakeoutTask';\n          break;\n        case 'buy':\n          releasePagePath = '/pages/TaskRelease/PurchaseTask/PurchaseTask';\n          break;\n        case 'sell':\n          releasePagePath = '/pages/TaskRelease/OutTask/OutTask';\n          break;\n        default:\n          console.warn('未知任务类型，无法跳转到修改页面:', this.task.type);\n          uni.showToast({\n            title: '该任务类型不支持修改',\n            icon: 'none'\n          });\n          return;\n      }\n\n      uni.navigateTo({\n        url: `${releasePagePath}?taskInfo=${encodeURIComponent(JSON.stringify(this.task))}`\n      });\n    },\n    confirmClaimTask() {\n      const currentUser = this.getCurrentUser();\n      \n      if (!uni.getStorageSync('userToken')) {\n        uni.showToast({ title: '请先登录', icon: 'none' });\n        return;\n      }\n      if (this.task.status !== 'pending') {\n        uni.showToast({ title: '任务状态已变更', icon: 'none' });\n        return;\n      }\n      if (!this.canClaimTask) {\n        uni.showToast({ title: '您不能接此任务', icon: 'none' });\n        return;\n      }\n\n      uni.showModal({\n        title: '确认接单',\n        content: '接单后即可查看发布者联系方式，确认接单后将无法取消，是否继续？',\n        confirmText: '确认',\n        cancelText: '取消',\n        success: (res) => {\n          if (res.confirm) {\n            console.log('调用接单API:', { taskId: this.task.id, userId: currentUser.id });\n            \n            const newTask = JSON.parse(JSON.stringify(this.task));\n            newTask.status = 'in_progress';\n            newTask.accepter = currentUser;\n            newTask.ownerType = 'received';\n\n            this.task = newTask;\n            \n            uni.showToast({\n              title: '接单成功',\n              icon: 'success',\n              duration: 2000\n            });\n            \n            try {\n              const existingTasks = uni.getStorageSync('myTasks') || '[]';\n              const tasks = JSON.parse(existingTasks);\n              const taskIndex = tasks.findIndex(t => t.id === this.task.id);\n              if (taskIndex !== -1) {\n                tasks[taskIndex] = newTask;\n                uni.setStorageSync('myTasks', JSON.stringify(tasks));\n              }\n            } catch (error) {\n              console.error('更新本地任务状态失败:', error);\n            }\n            \n            setTimeout(() => {\n              const navUrl = '/pages/MyTask/MyTask?acceptedTask=' + encodeURIComponent(JSON.stringify(newTask)) + '&activeTab=received';\n              uni.navigateTo({\n                url: navUrl\n              });\n            }, 1500);\n          }\n        }\n      });\n    },\n    goBack() {\n      uni.navigateBack();\n    },\n    async getTaskDetail(taskId) {\n      try {\n        console.log('获取任务详情 (模拟):', taskId);\n        \n        const mockTask = {\n          id: taskId,\n          type: 'express',\n          status: 'pending',\n          title: '代取快递',\n          description: '帮忙取一个快递，在学校快递站',\n          reward: 5,\n          publishTime: '2024-03-20 14:30',\n          expectedDeliveryTime: '2024-03-20 18:00',\n          pickupAddress: '学校快递站',\n          deliveryAddress: '宿舍区',\n          trackingNumber: '1234567890',\n          recipientName: '李四',\n          contactName: '李四',\n          contactPhone: '13900139000',\n          publisher: {\n            id: 'original_publisher_id',\n            nickname: '原始发布者',\n            avatar: '/static/avatar/default.png',\n            creditRating: 4.8\n          },\n          accepter: null\n        };\n        \n        return mockTask;\n      } catch (error) {\n        console.error('获取任务详情失败:', error);\n        uni.showToast({\n          title: '获取任务详情失败',\n          icon: 'error'\n        });\n        return null;\n      }\n    }\n  },\n  onLoad(options) {\n    console.log('[页面加载] 参数:', options);\n    \n    const currentTestRole = this.TEST_MODE ? (uni.getStorageSync('testRole') || 'user') : null;\n    console.log('[页面加载] 当前测试角色:', currentTestRole);\n    \n    if (this.TEST_MODE) {\n      this.getCurrentUser();\n    }\n    const currentUser = this.getCurrentUser();\n\n    if (options.taskInfo) {\n      try {\n        const taskInfo = JSON.parse(decodeURIComponent(options.taskInfo));\n        console.log('[页面加载] 解析后的任务信息:', taskInfo);\n        \n        const modifiedTask = JSON.parse(JSON.stringify(taskInfo));\n        \n        if (this.TEST_MODE) {\n          const user = this.getCurrentUser();\n          if (currentTestRole === 'publisher') {\n            modifiedTask.publisher = user;\n            modifiedTask.accepter = null;\n            modifiedTask.status = modifiedTask.status === 'in_progress' ? 'in_progress' : 'pending';\n          } else if (currentTestRole === 'claimer') {\n            modifiedTask.accepter = user;\n            if (modifiedTask.status === 'pending') modifiedTask.status = 'in_progress';\n          } else {\n            modifiedTask.publisher = this.TEST_USER.publisher;\n            modifiedTask.accepter = null;\n            modifiedTask.status = 'pending';\n            if(modifiedTask.publisher.id === currentUser.id) {\n              modifiedTask.publisher = this.TEST_USER.user;\n            }\n          }\n        }\n        \n        this.task = modifiedTask;\n        this.determineUserRole();\n        \n      } catch (error) {\n        console.error('[页面加载] 解析任务信息失败:', error);\n        uni.showToast({\n          title: '获取任务信息失败',\n          icon: 'error'\n        });\n      }\n    } else if (options.id) {\n      this.getTaskDetail(options.id).then(taskData => {\n        if (taskData) {\n          if (this.TEST_MODE) {\n            const user = this.getCurrentUser();\n            const modifiedTask = JSON.parse(JSON.stringify(taskData));\n            \n            if (currentTestRole === 'publisher') {\n              modifiedTask.publisher = user;\n              modifiedTask.accepter = null;\n              modifiedTask.status = 'pending';\n            } else if (currentTestRole === 'claimer') {\n              modifiedTask.accepter = user;\n              modifiedTask.status = 'in_progress';\n            } else {\n              modifiedTask.accepter = null;\n              modifiedTask.status = 'pending';\n            }\n            \n            this.task = modifiedTask;\n          } else {\n            this.task = taskData;\n          }\n          \n          this.determineUserRole();\n        } else {\n          console.error('[页面加载] 获取任务详情返回空数据:', options.id);\n          uni.showToast({\n            title: '任务不存在',\n            icon: 'none'\n          });\n        }\n      }).catch(error => {\n        console.error('[页面加载] 获取任务详情失败:', error);\n        uni.showToast({\n          title: '获取任务详情失败',\n          icon: 'error'\n        });\n      });\n    } else {\n      console.log('[页面加载] 没有任务信息，创建默认任务');\n      const currentUser = this.getCurrentUser();\n      \n      let defaultTask = {\n        id: 'default_task_id',\n        type: 'express',\n        status: 'pending',\n        title: '默认代取快递任务',\n        description: '这是一个默认的测试任务',\n        reward: 5,\n        publishTime: new Date().toLocaleString(),\n        expectedDeliveryTime: '18:00',\n        pickupAddress: '学校快递站',\n        deliveryAddress: '宿舍区',\n        trackingNumber: '1234567890',\n        contactName: '张三',\n        contactPhone: '13800138000',\n        publisher: null,\n        accepter: null\n      };\n\n      if (this.TEST_MODE) {\n        if (currentTestRole === 'publisher') {\n          defaultTask.publisher = currentUser;\n          defaultTask.status = 'pending';\n        } else if (currentTestRole === 'claimer') {\n          defaultTask.accepter = currentUser;\n          defaultTask.status = 'in_progress';\n        } else {\n          defaultTask.publisher = { id: 'other_publisher', nickname: '其他发布者', avatar: '/static/avatar/default.png' };\n          defaultTask.status = 'pending';\n        }\n      } else {\n        defaultTask.publisher = { id: 'default_publisher', nickname: '默认发布者', avatar: '/static/avatar/default.png', creditRating: 4.5 };\n      }\n      \n      this.task = defaultTask;\n      this.determineUserRole();\n    }\n  },\n  watch: {\n    task: {\n      handler(newTask) {\n        if (newTask) {\n          console.log('[任务数据变化] 重新判断角色');\n          this.determineUserRole();\n        }\n      },\n      deep: true\n    }\n  }\n}\n</script>\n\n<style>\n.container {\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  padding-bottom: 120rpx;\n}\n\n/* 自定义导航栏样式 */\n.custom-navbar {\n  padding-top:20rpx;\n  position: relative;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 44px;\n  display: flex;\n  align-items: center;\n  background-color: #ffffff;\n  z-index: 1000;\n  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);\n}\n\n.navbar-back {\n  position: absolute;\n  left: 0;\n  top: 70%;\n  transform: translateY(-50%);\n  padding: 0 15px;\n  height: 100%;\n}\n\n.navbar-title {\n  flex: 1;\n  text-align: center;\n  font-size: 17px;\n  font-weight: bold;\n}\n\n.navbar-placeholder {\n  height: 44px;\n}\n\n/* 任务状态标签样式 */\n.task-status-tag {\n  position: absolute;\n  top: 20rpx;\n  right: 20rpx;\n  padding: 6rpx 12rpx;\n  border-radius: 4rpx;\n  font-size: 24rpx;\n  z-index: 10;\n}\n\n.task-status-tag.pending { background-color: #FF9F1C; color: white; }\n.task-status-tag.in_progress { background-color: #00BFFF; color: white; }\n.task-status-tag.completed { background-color: #47B960; color: white; }\n.task-status-tag.cancelled { background-color: #999999; color: white; }\n\n/* 图片轮播区域样式 */\n.image-slider {\n  width: 100%;\n  height: 400rpx;\n}\n\n.image-slider swiper {\n  width: 100%;\n  height: 100%;\n}\n\n.image-slider swiper-item {\n  width: 100%;\n  height: 100%;\n}\n\n.slider-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n/* 任务信息区域样式 */\n.task-info {\n  background-color: #fff;\n  padding: 30rpx;\n  margin-bottom: 20rpx;\n  display: flex;\n  flex-direction: column;\n}\n\n.task-header-flex {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20rpx;\n  background-color: #ffffff;\n  border-radius: 16rpx;\n  margin-bottom: 20rpx;\n}\n\n.task-title {\n  font-size: 36rpx;\n  font-weight: bold;\n  color: #333333;\n  text-align: center;\n  margin-bottom: 16rpx;\n}\n\n.task-type {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  gap: 12rpx;\n}\n\n.type-tag {\n  padding: 10rpx 16rpx;\n  border-radius: 4rpx;\n  font-size: 24rpx;\n}\n\n.type-tag.express { background-color: #e6f7ff; color: #1890ff; }\n.type-tag.takeout { background-color: #f6ffed; color: #52c41a; }\n.type-tag.buy { background-color: #fff7e6; color: #fa8c16; }\n.type-tag.sell { background-color: #f9f0ff; color:rgb(63, 9, 139); }\n\n.task-time, .task-reward {\n  font-size: 28rpx;\n  color: #666;\n  margin-bottom: 10rpx;\n}\n\n.reward-value {\n  color: #f5222d;\n  font-weight: bold;\n}\n\n/* 描述区域样式 */\n.description-section {\n  background-color: #fff;\n  padding: 30rpx;\n  margin-bottom: 20rpx;\n}\n\n.section-title {\n  font-size: 30rpx;\n  font-weight: bold;\n  margin-bottom: 20rpx;\n}\n\n.description-text {\n  font-size: 28rpx;\n  color: #333;\n  line-height: 1.6;\n}\n\n/* 地址信息区域样式 */\n.address-section {\n  background-color: #fff;\n  padding: 30rpx;\n  margin-bottom: 20rpx;\n}\n\n.address-item {\n  margin-bottom: 20rpx;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n}\n\n.address-label {\n  font-size: 28rpx;\n  color: #666;\n  flex-basis: 140rpx;\n  flex-shrink: 0;\n  margin-right: 20rpx;\n}\n\n.address-content {\n  flex: 1;\n  display: flex;\n  align-items: center;\n}\n\n.address-text {\n  flex: 1;\n  font-size: 28rpx;\n  color: #333;\n}\n\n/* 发布者信息区域样式 */\n.publisher-section {\n  background-color: #fff;\n  padding: 30rpx;\n  margin-bottom: 20rpx;\n}\n\n.publisher-info {\n  margin-bottom: 20rpx;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n}\n\n.publisher-avatar {\n  width: 80rpx;\n  height: 80rpx;\n  border-radius: 50%;\n  margin-right: 20rpx;\n}\n\n.publisher-details {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 20rpx;\n  background-color: #f8f8f8;\n  border-radius: 8rpx;\n}\n\n.publisher-name {\n  font-size: 28rpx;\n  font-weight: bold;\n  margin-bottom: 20rpx;\n}\n\n.publisher-rating {\n  font-size: 24rpx;\n  color: #666;\n  margin-bottom: 10rpx;\n}\n\n.contact-info {\n  font-size: 28rpx;\n  color: #333;\n  margin-bottom: 10rpx;\n  display: block;\n}\n\n/* 底部操作栏样式 */\n.bottom-bar {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #fff;\n  padding: 20rpx 30rpx;\n  display: flex;\n  align-items: center;\n  box-shadow: 0 -2rpx 10rpx rgba(0, 0, 0, 0.05);\n}\n\n.action-buttons {\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  gap: 20rpx;\n  align-items: center;\n}\n\n.action-button {\n  padding: 10rpx 20rpx;\n  border-radius: 8rpx;\n  font-size: 28rpx;\n  font-weight: bold;\n}\n\n\n.action-button.confirm {\n  background-color: #00BFFF;\n  color: #fff;\n}\n\n.action-button.ignore {\n  background-color: #999999;\n  color: #fff;\n}\n\n.action-button.start {\n  background-color:rgba(37, 149, 255, 0.71);\n  color: #fff;\n}\n\n.action-button.cancel {\n  background-color:rgb(252, 109, 111);\n  color: #fff;\n}\n\n.urgent-tag {\n  background-color: #FF4D4F;\n  color: #ffffff;\n  font-size: 24rpx;\n  padding: 10rpx 16rpx;\n  border-radius: 4rpx;\n  font-weight: 500;\n}\n\n/* 添加隐私提示样式 */\n.privacy-tip {\n  font-size: 24rpx;\n  color: #999;\n  margin-top: 10rpx;\n  font-style: italic;\n}\n\n/* 测试按钮样式 */\n.test-buttons {\n  position: fixed;\n  top: 100rpx;\n  right: 20rpx;\n  display: flex;\n  flex-direction: column;\n  gap: 10rpx;\n  z-index: 1000;\n}\n\n.test-button {\n  font-size: 24rpx;\n  padding: 10rpx 20rpx;\n  background-color: rgba(0, 0, 0, 0.6);\n  color: white;\n  border-radius: 8rpx;\n  border: none;\n}\n</style>","import MiniProgramPage from 'D:/2大花/毕业设计/Compus/pages/task/TaskDetail/TaskDetail.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni","currentUser"],"mappings":"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"}